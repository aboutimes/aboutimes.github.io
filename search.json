[{"title":"Git 简明指南","url":"http://yoursite.com/2017/08/20/2017-08-20-Git简明指南/","content":"<p><img src=\"/images/git-1.png\" alt=\"\"></p>\n<h2 id=\"git是什么？\"><a href=\"#git是什么？\" class=\"headerlink\" title=\"git是什么？\"></a>git是什么？</h2><p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。说白了就是一个版本控制工具，帮助大家管理自己的代码。<br><a id=\"more\"></a></p>\n<h2 id=\"git与github有什么区别？\"><a href=\"#git与github有什么区别？\" class=\"headerlink\" title=\"git与github有什么区别？\"></a>git与github有什么区别？</h2><p>这个问题看似有点sb，不过确实很多人都分不清。</p>\n<ul>\n<li>git（工具）是一个开源的分布式版本控制系统</li>\n<li>github（社区）是一个用git做版本控制的项目托管平台，并附带交友分享功能。。类似的平台还有bitbucket、oschina的码云。这些平台基本都是以开源项目著称的，当然也提供一定的收费私有化托管服务。</li>\n<li>当然（私有化），比如coding、gitlab、gogs，这些都是做一些私有化项目托管的平台。gitlab、gogs都是开源的git托管平台，可以自己私有化部署。</li>\n</ul>\n<h2 id=\"工作原理：\"><a href=\"#工作原理：\" class=\"headerlink\" title=\"工作原理：\"></a>工作原理：</h2><p><img src=\"/images/git-2.png\" alt=\"\"></p>\n<ul>\n<li>Remote:远程仓库，就是类似github，coding等网站所提供的仓库</li>\n<li>Repository:本地仓库，执行<code>git push origin master</code>提交到远程仓库，执行<code>git clone</code> 地址将克隆远程仓库到本地</li>\n<li>Workspace:工作区，执行<code>git add *</code> 命令就把改动提交到了暂存区，执行<code>git pull</code> 命令将远程仓库的数据拉到当前分支并合并，执行<code>git checkout [branch-name]</code> 切换分支</li>\n<li>Index:暂存区，执行<code>git commit -m</code> ‘说明’ 命令就把改动提交到了仓库区（当前分支）<br>注：实际操作命令和上述命令会有所不同，这里是解释清楚命令和仓库的关系。</li>\n</ul>\n<h2 id=\"git版本控制方法\"><a href=\"#git版本控制方法\" class=\"headerlink\" title=\"git版本控制方法\"></a>git版本控制方法</h2><ul>\n<li>当文件变更提交时，git底层文件系统存储的则为文件快照，即整个文件内容，并保存指向快照的索引，考虑到性能因素，如果文件内容没有发生任何变化，该文件系统则不会重复保存文件，只是简单地保存文件的链接。<br><img src=\"/images/git-3.png\" alt=\"\"></li>\n<li>git之所以选择这样的底层存储数据结构，主要是为了提高git分支的使用效率。实际上，git分支本质上是一个指向索引对象的可变指针，而每一个索引对象又指向文件快照，这样一来，创建分支可以瞬间完成。<br><img src=\"/images/git-4.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h2><ul>\n<li>git可以没有中心服务器的，每个人机器上都是一个完整的库，自带备份效果，我们平时开发代码时的中央服务器其实和我们自己机器上的库内容是完全一样的（格式有点不同，是bare的）。虽然平时大家都是将代码提交到中央服务器上再统一pull别人的代码，但实际情况你可以总是pull张三的库，然后push给李四等等操作。去中心化设计思想所带来的另外一大好处是支持离线工作，在git中的绝大多数操作都只需要访问本地文件和资源。</li>\n</ul>\n<h2 id=\"git操作\"><a href=\"#git操作\" class=\"headerlink\" title=\"git操作\"></a>git操作</h2><ul>\n<li>下载：<a href=\"https://git-scm.com\" title=\"Git下载\" target=\"_blank\" rel=\"external\">Git下载</a> 可下载GUI版本，也可以安装bash版本。<br>mac下可以通过Homebrew安装:<br><code>brew install git</code></li>\n<li>创建仓库：仓库文件夹目录下打开终端：<br><code>git int</code>完成初始化<br>如果从远端仓库开始项目，先要克隆远程仓库：<br><code>git clone http://xxx</code> “<a href=\"http://xxx&quot;为仓库地址。\" target=\"_blank\" rel=\"external\">http://xxx&quot;为仓库地址。</a></li>\n<li>编辑配置文件.gitignore 设置不需要跟踪的文件夹一夹文件。</li>\n<li>工作流，参考原理图，HEAD为当前活跃分支。<br><img src=\"/images/git-5.png\" alt=\"\"><ul>\n<li>编辑文件。</li>\n<li>暂存已编辑文件：<br><code>git add 文件地址/文件全称</code> 不推荐使用 <code>git add.</code>此命令为暂存所有文件。</li>\n<li>提交<br><code>git commit -m &quot;本次提交说明&quot;</code> 建议多次分类提交，便于管理。</li>\n<li>推送，当完成阶段工作可以进行推送：<br><code>git push origin 要推送的分支</code> 如：master或dev_xx，origin为主机名。</li>\n<li>拉取，拉取远程仓库最新内容，合并到本地仓库。<br><code>git pull origin 要拉取的分支</code> pull包含拉取和合并两个操作，<br>可分开执行：<br><code>git fetch origin 要拉取的分支</code><br><code>git merge 拉取的分支</code> 合并拉取的分支到当前分支。</li>\n<li>分支操作<br><code>git checkout dev_xx</code> 切换到dev_xx分支。<br><code>git checkout -b dev_xx</code> 创建并且换到dev_xx分支。<br><code>git checkout -d dev_xx</code> 删除dev_xx分支。</li>\n<li>查看提交日志<br><code>git log</code></li>\n</ul>\n</li>\n</ul>\n","categories":["技术"],"tags":["Git"]},{"title":"","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]}]